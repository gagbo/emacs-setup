#+TITLE: Emacs Configuration
#+AUTHOR: Gerry Agbobada
#+EMAIL: gagbobada+git@gmail.com
#+OPTIONS: toc:2 num:nil

* Set personal information
  Define some variables that may be useful later
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Gerry Agbobada"
          user-mail-address "gagbobada+git@gmail.com")
  #+END_SRC

* Main initialisation
** Use-package
   Initialise the =use-package= package that we'll use from here on

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (eval-when-compile
       (require 'use-package)
       (require 'cl))
   #+END_SRC

** Inhibit =custom= writing to init file
   To make it work the =custom-set-variables= calls should be moved too.
   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/etc/custom.el")
     (load custom-file)
   #+END_SRC

** Diminish
   Reduces the clutter in the modeline. It is loaded early because use-package
   supports diminish in its command.
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t
       :config
       (diminish 'abbrev-mode)
       (diminish 'undo-tree-mode)
       (diminish 'auto-revert-mode)
     )
   #+END_SRC

** Initial scratch message
   Remind the user that the mapping to evaluate the command =eval-last-sexpr= is =^J=
   This initial scratch message won't show with the choice to use the
   *notes* buffer for the initial buffer.
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message ";; This buffer is for text that is not saved, and \
     for Lisp evaluation.\n\
     ;; To create a file, visit it with \\[find-file] and enter text in its buffer.\n\
     ;; To evaluate an S-expr in this buffer, use \\[eval-print-last-sexp].\n\n")
   #+END_SRC

** Initial buffer
   Let's use a notes file instead of the scratch buffer to start emacs
   #+BEGIN_SRC emacs-lisp
     (setq remember-notes-initial-major-mode 'org-mode)
     (setq initial-buffer-choice 'remember-notes)
   #+END_SRC

* Defaults / General
  These options set :
- The evil-integration option for evil-collection
- the inhibition of GNU advertisement
- the startup message in the echo area
- the use of space for indent
- useful flags for dired
- the timeout until displaying part of a binding in echo area

#+BEGIN_SRC emacs-lisp
  (setq evil-want-integration nil)
  (setq inhibit-default-init t
        inhibit-startup-message t)
  (defun display-startup-echo-area-message ()
    (message "Startup successful !"))
  (setq-default indent-tabs-mode nil)
  (setq-default scroll-step 5
                scroll-conservatively 25)
  (setq-default dired-listing-switches "-alh")
  (setq echo-keystrokes 0.5)
#+END_SRC

** Remove the trailing whitespaces on save
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Open URLs with =xdg-open=
   #+BEGIN_SRC emacs-lisp
     (setq browse-url-browser-function 'browse-url-xdg-open)
   #+END_SRC

** Save hist
   We set up a separate folder for the history, and also raise the history
   size
   #+BEGIN_SRC emacs-lisp
     (savehist-mode 1)
     (setq savehist-file "~/.emacs.d/etc/savehist"
           history-length 150)
   #+END_SRC

** Backup behaviour
   We set up a separate folder, and also enable auto-pruning of old save
   files.

   Also, autosaves are kept in a separate folder to further de-clutter
   the working directories
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '((".*" . "~/.local/share/emacs/saves")))
     (setq version-control t)
     (setq delete-old-versions t)

     (setq auto-save-list-file-prefix "~/.emacs.d/autosave/")
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosave/" t)))
   #+END_SRC

** Save-place
   Save the last position of point for every buffer
   #+BEGIN_SRC emacs-lisp
     (save-place-mode 1)
     (setq save-place-file "~/.emacs.d/etc/saveplace")
   #+END_SRC

** Recentf
   Save the list of recently accessed files
   #+BEGIN_SRC emacs-lisp
     (setq recentf-save-file "~/.emacs.d/etc/recentf"
           recentf-max-saved-items 50)
   #+END_SRC

** Bookmark
   #+BEGIN_SRC emacs-lisp
     (setq bookmark-default-file "~/.emacs.d/etc/recentf")
   #+END_SRC

** Eldoc
   Eldoc displays information about function signatures. Here we reduce
   the delay
   #+BEGIN_SRC emacs-lisp
     (setq eldoc-idle-delay 0.1)
   #+END_SRC

** Documentation for elisp
   We use =eldoc= for avoiding looking up the doc
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
   #+END_SRC

** Utilities for =list-packages= menu
   We add functions to filter the list by status (s new), or filter to
   see only marked packages.
   #+BEGIN_SRC emacs-lisp
     (defun package-menu-find-marks ()
       "Find packages marked for action in *Packages*."
       (interactive)
       (occur "^[A-Z"))

     (defun package-menu-filter-by-status (status)
       "Filter the *Packages* buffer by status."
       (interactive
        (list (completing-read
               "Status : " '("new" "installed" "dependency" "obsolete"))))
       (package-menu-filter (concat "status:" status)))

     (define-key package-menu-mode-map "s" #'package-menu-filter-by-status)
     (define-key package-menu-mode-map "a" #'package-menu-find-marks)
   #+END_SRC

* Org-mode
** Enable coloration
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC

** todos list settings
   #+BEGIN_SRC emacs-lisp
     (setq org-enforce-todo-dependencies t
           org-enforce-todo-checkbox-dependencies t)
   #+END_SRC

** Setup files
   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/org/"
           org-agenda-files (list org-directory)
           org-default-notes-file "~/org/inbox.org"
           org-capture-templates
           '(("n" "Note" entry (file+headline "~/org/inbox.org" "Inbox")
                  "* TODO %<%Y-%m-%d %H:%M:%S>\n\n%?" :empty-lines 1)
             ("p" "PW" entry (file+headline "~/org/pw.org" "PW")
                  "* TODO %<%Y-%m-%d %H:%M:%S>\n\n%?" :empty-lines 1)
             ("w" "Work" entry (file+datetree "~/org/work.org")
                  "* %<%H:%M>\n\n%?" :empty-lines 1)
             ("j" "Journal" entry (file+datetree "~/org/journal.org")
                  "* %<%H:%M>\n\n%?" :empty-lines 1)))
   #+END_SRC

** Add export backends
   #+BEGIN_SRC emacs-lisp
     (setq org-export-backends '(ascii beamer html latex md))
   #+END_SRC

* Appearance // UI
** Display line number
   #+BEGIN_SRC emacs-lisp
     (setq linum-format "%3d")
     (global-linum-mode t)
   #+END_SRC

** Set Frame title

   #+BEGIN_SRC emacs-lisp
     (setq-default frame-title-format '(multiple-frames "%b"
                                   ("" invocation-name "@" system-name " ")
                                   (:eval (projectile-project-name))))
   #+END_SRC

** No toolbar

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)

     (when (display-graphic-p) (set-scroll-bar-mode nil))
   #+END_SRC

** Modeline tweaks
   Activate column and line number in the modeline, as well as time
   #+BEGIN_SRC emacs-lisp
     (column-number-mode t)
     (line-number-mode t)
     (display-time-mode t)
   #+END_SRC

** Deactivate entirely the bell
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC

** Powerline
   Use the powerline package.
*** TODO Manage the flickering with auto-collape
    #+BEGIN_SRC emacs-lisp
      (use-package powerline
        :init
        (setq powerline-evil-tag-style "visual-expanded")
        (setq powerline-arrow-shape 'curve)
        :ensure t
        :config
        (use-package powerline-evil
          :ensure t)
        (use-package spaceline
          :ensure t
          :config
          (require 'spaceline-config)
          (spaceline-spacemacs-theme)
          (spaceline-helm-mode))
        )
    #+END_SRC

** Theme
   Set custom theme directory in order to replicate Iceberg
   #+BEGIN_SRC emacs-lisp
     (setq custom-theme-directory "~/.emacs.d/resources/themes")
   #+END_SRC

   Make custom themes safe so the daemon doesn't hang later if we
   modify something
   #+BEGIN_SRC emacs-lisp
     (setq custom-safe-themes t)
   #+END_SRC

   Use the Gruvbox theme
   The =powerline-reset= function has to be called in order to fix the
   separators.
   #+BEGIN_SRC emacs-lisp
     (use-package gruvbox-theme
       :ensure t)
     (load-theme 'gruvbox t)
     (powerline-reset)
   #+END_SRC

** Set Font
   Current the font is properly set only if starting from Windows
   #+BEGIN_SRC emacs-lisp
     (cond ((eq system-type 'windows-nt)
            (set-face-attribute 'default nil :family "Fira Code" :height 110))
            (t (set-face-attribute 'default nil :family "Fira Mono" :height 110)))
   #+END_SRC

** Project Drawer
   The objective for this part is to set a proper Project drawer on the side
   with easy navigation
   #+BEGIN_SRC emacs-lisp
     (use-package sr-speedbar
       :ensure t
       :init
       (use-package speedbar
         :ensure t
         :config
         (setq speedbar-show-unknown-files t))
       (setq sr-speedbar-width-x 50)
       (setq sr-speedbar-width-console 50)
       (setq sr-speedbar-max-width 65)
       (setq sr-speedbar-skip-other-window-p t)
       (setq sr-speedbar-auto-refresh t)
       :config
       (global-set-key (kbd "<f8>") 'sr-speedbar-toggle)

       (use-package projectile-speedbar
         :ensure t
         :config
         (global-set-key (kbd "<f9>") 'projectile-speedbar-open-current-buffer-in-tree)
         )
       )
   #+END_SRC
* Helm settings
** TODO Emulate :ls :split b using helm-mini
   The function =helm-mini-other-window= does not exist, so we should create
   it to add a mapping to evil-ex ="spb "=

** Fuzzy match reminder
   The documentation here comes from the [[https://github.com/emacs-helm/helm/wiki/Fuzzy-matching][wiki]], it has not been
   tested
- =helm-recentf= \rightarrow =helm-recentf-fuzzy-match=
- =helm-mini= \rightarrow =helm-buffers-fuzzy-matching= =helm-recentf-fuzzy-match=
- =helm-buffers-list= \rightarrow =helm-buffers-fuzzy-matching=
- =helm-find-files= \rightarrow enabled by default
- =helm-locate= \rightarrow =helm-locate-fuzzy-match=
- =helm-M-x= \rightarrow =helm-M-x-fuzzy-match=
- =helm-semantic= \rightarrow =helm-recentf-fuzzy-match=
- =helm-imenu= \rightarrow =helm-semantic-fuzzy-match=
- =helm-apropos= \rightarrow =helm-apropos-fuzzy-match=
- =helm-lisp-completion-at-point= \rightarrow =helm-list-fuzzy-completion=

If fuzzy everywhere is slow, use =helm-candidate-number-limit=

** Mappings
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :diminish helm-mode
       :ensure t
       :init
       (setq helm-autoresize-max-height 50)
       (setq helm-autoresize-min-height 20)
       (setq helm-completion-in-region-fuzzy-match t
             helm-mode-fuzzy-match t)
       :config
       (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
       (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
       (define-key helm-map (kbd "C-z")  'helm-select-action)
       (helm-autoresize-mode 1)
       (define-key helm-map (kbd "C-j") 'helm-next-line)
       (define-key helm-map (kbd "C-k") 'helm-previous-line)
       (define-key helm-map (kbd "C-h") 'helm-next-source)
       (define-key helm-map (kbd "C-S-h") 'describe-key)
       (define-key helm-map (kbd "C-l") (kbd "RET"))
       (define-key helm-map [escape] 'helm-keyboard-quit)
       (define-key evil-ex-map "b " 'helm-mini)
       ;;(define-key evil-ex-map "spb " 'helm-mini-other-window)
       (define-key evil-ex-map "e " 'helm-find-files)
       (define-key evil-ex-map "sp " 'helm-find-files-other-window)
       (global-set-key (kbd "M-x") 'helm-M-x)

       (helm-mode 1)
       )
   #+END_SRC

** Appearance
   Also, set the selection line in Helm in black over light gold :
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'helm-selection nil
                         :background "light goldenrod"
                         :foreground "black" )
   #+END_SRC

* Evil Mode
** TODO separate the big package call into functions and smaller blocks
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :init
       (setq evil-want-integration nil)
       :config
       (evil-mode 1)
       (use-package evil-leader
         :ensure t
         :config
         (global-evil-leader-mode)
         (evil-leader/set-leader "<SPC>")
         (evil-leader/set-key
           "e" 'projectile-find-file
           "x" 'helm-M-x
           "pf" 'helm-projectile
           "bd" 'kill-buffer-and-window
           "gs" 'magit-status
           "ne" 'flycheck-next-error
           "pe" 'flycheck-previous-error
           "ol" 'org-store-link
           "oa" 'org-agenda
           "oc" 'org-capture
           "ob" 'org-iswitchb
           )
         )

       (use-package evil-surround
         :ensure t
         :config
         (global-evil-surround-mode))

       (use-package evil-indent-textobject
         :ensure t)

       (use-package evil-magit
         :ensure t)

       (use-package evil-matchit
         :ensure t)

       (use-package evil-nerd-commenter
         :ensure t)

       (use-package evil-commentary
         :ensure t)

       (use-package evil-lion
         :ensure t)

       (use-package evil-tutor
         :ensure t)

       (use-package evil-visual-mark-mode
         :ensure t)

       (use-package org-evil
         :ensure t)

       (define-key evil-normal-state-map "gt" 'xref-find-definitions)
       (define-key evil-normal-state-map "gT" 'xref-find-references)
       (define-key evil-normal-state-map [escape] 'keyboard-quit)
       (define-key evil-visual-state-map [escape] 'keyboard-quit)
       (define-key evil-ex-map "term" 'ansi-term )
       (define-key evil-ex-search-keymap "\C-r" 'evil-paste-from-register)
       (setq evil-search-module 'evil-search)
       )

     (use-package evil-collection
       :after evil
       :ensure t
       :config
       (setq evil-collection-mode-list nil)
       (add-to-list 'evil-collection-mode-list 'company)
       (add-to-list 'evil-collection-mode-list 'helm)
       (add-to-list 'evil-collection-mode-list 'magit)
       (evil-collection-init))
   #+END_SRC

** Exchange the roles of : and ;
   Command : is used more often and needs shift naturally
   #+BEGIN_SRC emacs-lisp
     (define-key evil-normal-state-map (kbd ";") 'evil-ex)
     (define-key evil-normal-state-map (kbd ":") 'evil-repeat-find-char)
     (define-key evil-motion-state-map (kbd ";") 'evil-ex)
     (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char)
     (define-key evil-visual-state-map (kbd ";") 'evil-ex)
     (define-key evil-visual-state-map (kbd ":") 'evil-repeat-find-char)
   #+END_SRC

* The rest
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (setq company-idle-time 0.1
             company-minimum-prefix-length 3
             company-selection-wrap-around t
             company-show-numbers t
             company-require-match 'never)
       (add-hook 'after-init-hook 'global-company-mode)
       (setq company-backends (delete 'company-semantic company-backends))
       (add-to-list 'company-backends 'company-lsp)
       (setq company-transformers nil
             company-lsp-async t
             company-lsp-cache-candidates nil)
       )
   #+END_SRC

   Also, use wasamasa's workaround for the Esc key when completion is active
    #+BEGIN_SRC emacs-lisp
        (defun my-company-abort ()
         (interactive)
         (company-abort)
         (when (and (bound-and-true-p evil-mode)
                (eq evil-state 'insert))
          (evil-force-normal-state)))

        (with-eval-after-load 'company
         (define-key company-active-map (kbd "<escape>") 'my-company-abort)
         (define-key company-search-map (kbd "<escape>") 'company-search-abort))
    #+END_SRC

** Flycheck main part
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (use-package flycheck-color-mode-line
         :ensure t
         :config
         (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
       (use-package flycheck-clangcheck
         :ensure t)
       (use-package flycheck-pyflakes
         :ensure t)
       (global-flycheck-mode))
   #+END_SRC

** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :config
       (use-package evil-magit
         :ensure t))
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :diminish projectile-mode "Prj"
       :ensure t
       :config
       (projectile-mode 1)
       (use-package helm-projectile
         :ensure t
         :config
         (helm-projectile-on)
         )
       )
   #+END_SRC

** Clang-format
   #+BEGIN_SRC emacs-lisp
     (use-package clang-format
       :ensure t
       :config
       (require 'clang-format)
       (global-set-key [M-=] 'clang-format-buffer)
       )
   #+END_SRC

** CcMode
   #+BEGIN_SRC emacs-lisp
     (use-package cc-mode
       :ensure t
       :config
       (setq c-basic-offset 4)
       (setq c-default-style '((java-mode . "java")
                               (awk-mode . "awk")
                               (c-mode . "user")))
       (define-key c-mode-map  [(tab)] 'company-complete)
       (define-key c++-mode-map  [(tab)] 'company-complete)
       )
   #+END_SRC

** Elpy
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :init
       (setq elpy-rpc-python-command "python3")
       (setq elpy-rpc-backend "jedi")
       (setq python-shell-interpreter "python3")
       (setq python-shell-interpreter-args "-i")
       (setq python-check-command "/usr/bin/pyflakes-3")
       :config
       (elpy-enable)
       (add-hook 'python-mode-hook (lambda () (show-paren-mode 1)))
       )

     (use-package sml-mode
       :ensure t)
   #+END_SRC

** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
       (setq yas-snippet-dirs '("~/.emacs.d/snippets/"))
       :config
       (yas-global-mode)
       )
   #+END_SRC

** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
      :ensure t
      :mode (("README\\.md\\'" . gfm-mode)
          ("\\.md\\'" . markdown-mode)
          ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
   #+END_SRC

** Smartparens
   Let's work on RSI, one pair at a time
   #+BEGIN_SRC emacs-lisp
     (defun my-create-newline-and-enter-sexp (&rest _ignored)
       "Open a new brace or bracket expression, with relevant newlines and indent."
       (newline)
       (indent-according-to-mode)
       (forward-line -1)
       (indent-according-to-mode))

     (use-package smartparens
       :ensure t
       :init
       (setq sp-show-pair-from-inside t)
       (setq sp-autoescape-string-quote nil)
       :config
       (require 'smartparens-config)
       (sp-local-pair 'c-mode "{" nil :post-handlers
        '((my-create-newline-and-enter-sexp "RET")))
       (sp-local-pair 'java-mode "{" nil :post-handlers
        '((my-create-newline-and-enter-sexp "RET"))))
   #+END_SRC

** LSP mode / CQuery
   LSP-mode is installed to work with most servers
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :ensure t
       :config
       (use-package lsp-ui
         :ensure t
         :config
         (add-hook 'lsp-mode-hook 'lsp-ui-mode))
       (use-package company-lsp
         :ensure t)
     )
   #+END_SRC

   And then, Cquery is installed separately. Note : =M-x lsp-cquery-enable=
   calls =lsp-mode= for us.
   #+BEGIN_SRC emacs-lisp
     (defun cquery//enable ()
      (condition-case nil
       (lsp-cquery-enable)
       (user-error nil)))
     (use-package cquery
       :ensure t
       :init
       (setq cquery-executable "/home/gagbo/soft/cquery/build/release/bin/cquery")
       (setq cquery-extra-args '("--log-file=/tmp/cq.log"))
       (setq cquery-cache-dir "/home/gagbo/.cache/cquery")
       (setq cquery-sem-highlight-method 'font-lock)
       (setq cquery-extra-init-params '(:completion (:detailedLabel t)))
       (add-hook 'c-mode-common-hook #'cquery//enable)
       :config
       (define-key evil-normal-state-map (kbd "C-p") 'lsp-ui-peek-jump-forward)
       (define-key evil-normal-state-map (kbd "C-t") 'lsp-ui-peek-jump-backward)
       (use-package helm-xref
         :ensure t
         :config
         (setq xref-show-xrefs-function 'helm-xref-show-xrefs))
       )
   #+END_SRC

   We can use the extensions that cquery give to LSP using lsp-ui candy
   #+BEGIN_SRC emacs-lisp
     ;; (lsp-ui-peek-find-custom 'base "$cquery/base")
     ;; (lsp-ui-peek-find-custom 'callers "$cquery/callers")
     ;; (lsp-ui-peek-find-custom 'random "$cquery/random")
   #+END_SRC

** MTC scripts
   I built a custom major mode for the markup language used to communicate
   with the simulation software in the lab.

   I started making a ftplugin in vim, but creating a proper compiler plugin
   in vimscript seems a lot harder than in elisp. And on top of this, Emacs
   seems created to build easy REPLs anyway (and Evil is working)

   The following code checks for the existence of the =mtc-mode.el= script,
   and sets things up accordingly if found

   #+BEGIN_SRC emacs-lisp
     (cond ((file-readable-p (expand-file-name "mtc-mode.el" user-init-dir))
            (progn
             (load-file (expand-file-name "mtc-mode.el" user-init-dir))
             (add-to-list 'auto-mode-alist '("\\.mtc\\'" . mtc-mode))))
           (t ()))
   #+END_SRC
